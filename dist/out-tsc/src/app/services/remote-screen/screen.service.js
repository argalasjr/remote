// THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
var ScreenService = /** @class */ (function () {
    function ScreenService(http) {
        var _this = this;
        this.http = http;
        this.inputRequests$ = new Subject();
        this.inputRequests$.subscribe(function (request) {
            _this.sendRequest(request.ip, 'SetInput', { input: request.input }).subscribe();
        });
    }
    ScreenService.prototype.createQuery = function (method, params) {
        return {
            id: '1',
            jsonrpc: '2.0',
            method: method,
            params: params
        };
    };
    ScreenService.prototype.sendRequest = function (ip, method, params) {
        var url = "http://" + ip + ":8974/TBS.TSeries.Services.RemoteScreen.Screen";
        return this.http.post(url, this.createQuery(method, params)).pipe(map(function (jsonData) {
            if (jsonData.error) {
                throw new Error(jsonData.error.message || jsonData.error);
            }
            return jsonData.result;
        }));
    };
    ScreenService.prototype.GetFrame = function (ip, forceFullFrame) {
        return this.sendRequest(ip, 'GetFrame', { forceFullFrame: forceFullFrame });
    };
    ScreenService.prototype.SetInput = function (ip, input) {
        this.inputRequests$.next({ ip: ip, input: input });
    };
    ScreenService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [HttpClient])
    ], ScreenService);
    return ScreenService;
}());
export { ScreenService };
/*}
}
}
}
*/
//# sourceMappingURL=screen.service.js.map