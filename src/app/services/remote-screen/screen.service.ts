// THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { map } from 'rxjs/operators';

interface JsonRpcResponse<T> {
    error: {
        message: string;
    } | any;
    result: T;
}
/* Do not create namespaces because of bug https://github.com/angular/angular/issues/15613
export namespace TBS {
export namespace TSeries {
export namespace Services {
export namespace RemoteScreen {
*/

export interface IInput {
    keyboard: IKeyboardInput;
    mouse: IMouseInput;
}

export interface IKeyboardInput {
    inputName: string;
    type: string;
    currentValue: string;
}

export interface IMouseInput {
    x: number;
    y: number;
    type: string;
}

@Injectable({
    providedIn: 'root'
})
export class ScreenService {

    private inputRequests$ = new Subject<{ ip: string, input: IInput }>();

    constructor(private http: HttpClient) {
        this.inputRequests$.subscribe(request => {
            this.sendRequest<void>(request.ip, 'SetInput', { input: request.input }).subscribe();
        });
    }

    private createQuery(method: string, params: any) {
        return {
            id: '1',
            jsonrpc: '2.0',
            method: method,
            params: params
        };
    }

    protected sendRequest<T>(ip: string, method: string, params: any): Observable<T> {
        const url = `http://${ip}:8974/TBS.TSeries.Services.RemoteScreen.Screen`;

        return this.http.post<JsonRpcResponse<T>>(url, this.createQuery(method, params)).pipe(
            map(jsonData => {
                if (jsonData.error) {
                    throw new Error(jsonData.error.message || jsonData.error);
                }

                return jsonData.result;
            })
        );
    }

    GetFrame(ip: string, forceFullFrame: number): Observable<{ image: string; keyboard: IKeyboardInput; }> {
        return this.sendRequest<{ image: string; keyboard: IKeyboardInput; }>(ip, 'GetFrame', { forceFullFrame });
    }

    SetInput(ip: string, input: IInput) {
        this.inputRequests$.next({ ip, input });
    }
}

/*}
}
}
}
*/



